# Data Sources

## 1. Basketball Reference: Team Advanced Statistics (1980-2025)

![](images/ball_ref.webp)

### Source Information
- **Primary Source**: [Basketball-Reference.com](https://www.basketball-reference.com/)
- **Direct URL Pattern**: `https://www.basketball-reference.com/leagues/NBA_[YEAR].html`
  - Example: [2023-24 Advanced Stats](https://www.basketball-reference.com/leagues/NBA_2024.html)
- **Coverage**: 45 seasons (1980-81 through 2024-25)

### Extraction Method

Data was collected via manual download from Basketball Reference:

1. Navigate to the season page (e.g., `https://www.basketball-reference.com/leagues/NBA_2024.html`)
2. Scroll to "Team Per Game Stats" or "Advanced Stats" table
3. Click **"Share & Export"** â†’ **"Get table as CSV (for Excel)"**
4. Save the exported HTML file, then convert to CSV
5. Repeat for all 45 seasons (1980-81 through 2024-25)

**Data Processing:**
Downloaded HTML tables were converted to CSV format using a Python script that:
- Reads HTML tables using `pandas.read_html()`
- Handles multi-level column names
- Exports clean CSV files

### Data Dictionary

**Key Variables** (31 total columns):

| Variable | Description | Relevance to Time-Series Analysis |
|----------|-------------|-----------------------------------|
| `Team` | Team name | Identifier for aggregation |
| `W`, `L` | Wins, Losses | Win rate time series by season |
| `ORtg` | Offensive Rating (pts per 100 possessions) | **Primary dependent variable** for efficiency evolution |
| `DRtg` | Defensive Rating (pts allowed per 100 poss) | Defensive efficiency trends |
| `NRtg` | Net Rating (ORtg - DRtg) | Overall team quality metric |
| `Pace` | Possessions per 48 minutes | **Key variable** for pace evolution analysis |
| `3PAr` | 3-Point Attempt Rate (% of FGA from 3PT) | **Primary indicator** of analytics revolution |
| `TS%` | True Shooting Percentage | Shooting efficiency accounting for FT, 2PT, 3PT |
| `eFG%` | Effective Field Goal Percentage | Weighted shooting efficiency |
| `FTr` | Free Throw Attempt Rate | Offensive strategy metric |
| `ORB%`, `DRB%` | Off/Def Rebound Percentage | Four Factors metrics |
| `TOV%` | Turnover Percentage | Ball security metric |
| `Attendance` | Total season attendance | **COVID disruption proxy** |

## 2. Sports Betting & Entertainment Stock Data (2020-2025)

![](images/yahoo_logo.jpg)

### Source Information

- **Primary Source**: Yahoo Finance
- **API Library**: `yfinance` (Python package for Yahoo Finance data)
- **Documentation**: [yfinance GitHub](https://github.com/ranaroussi/yfinance)
- **Coverage**:
  - **Sports Betting Stocks (DKNG, PENN, MGM, CZR)**: 2020 - Present
  - **Entertainment Baseline (DIS)**: 1980 - Present
- **Format**: CSV (saved locally after API download)
- **Location in Project**: `data/financial/[TICKER]_daily.csv`
- **Cost**: Free, no API key required

### Selected Tickers

**Sports Betting Stocks (COVID-era focus):**

1. **DKNG (DraftKings Inc.)**
   - **Symbol**: DKNG (Nasdaq)
   - **IPO Date**: April 23, 2020

2. **PENN (Penn Entertainment / ESPN BET)**
   - **Symbol**: PENN (Nasdaq)
   - **Start Date**: January 2020

3. **MGM (MGM Resorts / MGM BET)**
   - **Symbol**: MGM (NYSE)
   - **Start Date**: January 2020

4. **CZR (Caesars Entertainment / Caesars Sportsbook)**
   - **Symbol**: CZR (Nasdaq)
   - **Start Date**: January 2020

**Entertainment Baseline:**

1. **DIS (The Walt Disney Company)**
   - **Symbol**: DIS (NYSE)
   - **Established**: Trading since 1957

### Extraction Method

Yahoo Finance provides free access to historical stock data via the `yfinance` Python library:

**Step 1: Install yfinance**
```bash
pip install yfinance
```

**Step 2: Download Stock Data**
```python
import yfinance as yf
import pandas as pd
import numpy as np
import os

# Create financial data directory
os.makedirs('data/financial', exist_ok=True)

# Define stocks
stocks = {
    'DKNG': {'name': 'DraftKings', 'start': '2020-04-23'},
    'PENN': {'name': 'Penn Entertainment', 'start': '2020-01-01'},
    'MGM': {'name': 'MGM Resorts', 'start': '2020-01-01'},
    'CZR': {'name': 'Caesars Entertainment', 'start': '2020-01-01'},
    'DIS': {'name': 'Disney (ESPN)', 'start': '1980-01-01'}
}

# Download and process each stock
for ticker, info in stocks.items():
    df = yf.download(ticker, start=info['start'], end='2025-01-01', progress=False)

    # Calculate returns and volatility
    df['Returns'] = df['Adj Close'].pct_change()
    df['Log_Returns'] = np.log(df['Adj Close'] / df['Adj Close'].shift(1))
    df['Volatility_20d'] = df['Returns'].rolling(window=20).std()
    df['Cumulative_Returns'] = (1 + df['Returns']).cumprod() - 1

    # Save to CSV
    df.to_csv(f'data/financial/{ticker}_daily.csv')
```

### Data Dictionary

**Raw Variables from Yahoo Finance** (7 columns):

| Variable | Description | Relevance to Time-Series Analysis |
|----------|-------------|-----------------------------------|
| `Date` | Trading date | **Time index** for daily time series |
| `Open` | Opening price | Intraday price dynamics |
| `High` | Daily high price | Volatility measure |
| `Low` | Daily low price | Volatility measure |
| `Close` | Closing price | End-of-day price level |
| `Adj Close` | Adjusted closing price | **Primary variable** (adjusted for splits/dividends) |
| `Volume` | Trading volume | Liquidity and market interest |

**Derived Time Series Variables:**

| Variable | Calculation | Use in Analysis |
|----------|-------------|-----------------|
| `Daily Returns` | `pct_change(Adj Close)` | **Main dependent variable** for volatility modeling |
| `Log Returns` | `log(Close_t / Close_{t-1})` | Continuous returns for ARIMA |
| `Volatility (20-day)` | `rolling(20).std(Returns)` | Volatility clustering analysis |
| `Cumulative Returns` | `cumprod(1 + Returns) - 1` | Long-term performance trends |
