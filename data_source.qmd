# Data Sources

## 1. Basketball Reference: Team Advanced Statistics (1980-2025)

### Source Information
- **Primary Source**: [Basketball-Reference.com](https://www.basketball-reference.com/)
- **Direct URL Pattern**: `https://www.basketball-reference.com/leagues/NBA_[YEAR].html`
  - Example: [2023-24 Advanced Stats](https://www.basketball-reference.com/leagues/NBA_2024.html)
- **Coverage**: 45 seasons (1980-81 through 2024-25)

### Extraction Method

Data was collected via manual download from Basketball Reference:

1. Navigate to the season page (e.g., `https://www.basketball-reference.com/leagues/NBA_2024.html`)
2. Scroll to "Team Per Game Stats" or "Advanced Stats" table
3. Click **"Share & Export"** â†’ **"Get table as CSV (for Excel)"**
4. Save the exported HTML file, then convert to CSV
5. Repeat for all 45 seasons (1980-81 through 2024-25)

**Data Processing:**
Downloaded HTML tables were converted to CSV format using a Python script that:
- Reads HTML tables using `pandas.read_html()`
- Handles multi-level column names
- Exports clean CSV files

### Data Dictionary

**Key Variables** (31 total columns):

| Variable | Description | Relevance to Time-Series Analysis |
|----------|-------------|-----------------------------------|
| `Team` | Team name | Identifier for aggregation |
| `W`, `L` | Wins, Losses | Win rate time series by season |
| `ORtg` | Offensive Rating (pts per 100 possessions) | **Primary dependent variable** for efficiency evolution |
| `DRtg` | Defensive Rating (pts allowed per 100 poss) | Defensive efficiency trends |
| `NRtg` | Net Rating (ORtg - DRtg) | Overall team quality metric |
| `Pace` | Possessions per 48 minutes | **Key variable** for pace evolution analysis |
| `3PAr` | 3-Point Attempt Rate (% of FGA from 3PT) | **Primary indicator** of analytics revolution |
| `TS%` | True Shooting Percentage | Shooting efficiency accounting for FT, 2PT, 3PT |
| `eFG%` | Effective Field Goal Percentage | Weighted shooting efficiency |
| `FTr` | Free Throw Attempt Rate | Offensive strategy metric |
| `ORB%`, `DRB%` | Off/Def Rebound Percentage | Four Factors metrics |
| `TOV%` | Turnover Percentage | Ball security metric |
| `Attendance` | Total season attendance | **COVID disruption proxy** |

## 2. Sports Betting & Entertainment Stock Data (2020-2025)

### Source Information

- **Primary Source**: Yahoo Finance
- **API Library**: `yfinance` (Python package for Yahoo Finance data)
- **Documentation**: [yfinance GitHub](https://github.com/ranaroussi/yfinance)
- **Coverage**:
  - **Sports Betting Stocks (DKNG, PENN, MGM, CZR)**: 2020 - Present
  - **Entertainment Baseline (DIS)**: 1980 - Present
- **Format**: CSV (saved locally after API download)
- **Location in Project**: `data/financial/[TICKER]_daily.csv`
- **Cost**: Free, no API key required

### Selected Tickers

**Sports Betting Stocks (COVID-era focus):**

1. **DKNG (DraftKings Inc.)**
   - **Symbol**: DKNG (Nasdaq)
   - **IPO Date**: April 23, 2020

2. **PENN (Penn Entertainment / ESPN BET)**
   - **Symbol**: PENN (Nasdaq)
   - **Start Date**: January 2020

3. **MGM (MGM Resorts / MGM BET)**
   - **Symbol**: MGM (NYSE)
   - **Start Date**: January 2020

4. **CZR (Caesars Entertainment / Caesars Sportsbook)**
   - **Symbol**: CZR (Nasdaq)
   - **Start Date**: January 2020

**Entertainment Baseline:**

1. **DIS (The Walt Disney Company)**
   - **Symbol**: DIS (NYSE)
   - **Established**: Trading since 1957

### Extraction Method

Yahoo Finance provides free access to historical stock data via the `yfinance` Python library:

**Step 1: Install yfinance**
```bash
pip install yfinance
```

**Step 2: Download Stock Data**
```python
import yfinance as yf
import pandas as pd
import numpy as np
import os

# Create financial data directory
os.makedirs('data/financial', exist_ok=True)

# Define stocks
stocks = {
    'DKNG': {'name': 'DraftKings', 'start': '2020-04-23'},
    'PENN': {'name': 'Penn Entertainment', 'start': '2020-01-01'},
    'MGM': {'name': 'MGM Resorts', 'start': '2020-01-01'},
    'CZR': {'name': 'Caesars Entertainment', 'start': '2020-01-01'},
    'DIS': {'name': 'Disney (ESPN)', 'start': '1980-01-01'}
}

# Download and process each stock
for ticker, info in stocks.items():
    df = yf.download(ticker, start=info['start'], end='2025-01-01', progress=False)

    # Calculate returns and volatility
    df['Returns'] = df['Adj Close'].pct_change()
    df['Log_Returns'] = np.log(df['Adj Close'] / df['Adj Close'].shift(1))
    df['Volatility_20d'] = df['Returns'].rolling(window=20).std()
    df['Cumulative_Returns'] = (1 + df['Returns']).cumprod() - 1

    # Save to CSV
    df.to_csv(f'data/financial/{ticker}_daily.csv')
```

### Data Dictionary

**Raw Variables from Yahoo Finance** (7 columns):

| Variable | Description | Relevance to Time-Series Analysis |
|----------|-------------|-----------------------------------|
| `Date` | Trading date | **Time index** for daily time series |
| `Open` | Opening price | Intraday price dynamics |
| `High` | Daily high price | Volatility measure |
| `Low` | Daily low price | Volatility measure |
| `Close` | Closing price | End-of-day price level |
| `Adj Close` | Adjusted closing price | **Primary variable** (adjusted for splits/dividends) |
| `Volume` | Trading volume | Liquidity and market interest |

**Derived Time Series Variables:**

| Variable | Calculation | Use in Analysis |
|----------|-------------|-----------------|
| `Daily Returns` | `pct_change(Adj Close)` | **Main dependent variable** for volatility modeling |
| `Log Returns` | `log(Close_t / Close_{t-1})` | Continuous returns for ARIMA |
| `Volatility (20-day)` | `rolling(20).std(Returns)` | Volatility clustering analysis |
| `Cumulative Returns` | `cumprod(1 + Returns) - 1` | Long-term performance trends |

#### 1. COVID-19 Disruption Analysis

**Sports Betting Stocks as Natural Experiment:**
- Multiple stocks went public or became relevant during COVID-19 (2020)
- Stock prices reflect real-time market expectations of sports industry recovery
- Correlation with NBA attendance recovery and season disruptions

**Research Questions:**
- How did sports betting stocks react to NBA bubble season announcement (July 2020)?
- Did stock volatility correlate with NBA attendance volatility?
- How did return to normal NBA operations (2021-22) affect stock performance?

#### 2. Seasonality in Financial Markets

**NBA Season Effects on Stock Prices:**
- Test whether sports betting stocks show higher returns during NBA playoffs (April-June)
- Examine whether Disney stock shows seasonal patterns tied to NBA Finals viewership
- Compare volatility during NBA season vs. off-season

**Methods**: SARIMA models, seasonal decomposition (STL), Fourier analysis

#### 3. Long-Term Industry Growth (DIS: 1980-2025)

**Correlation with NBA Evolution:**
- Did Disney stock benefit from NBA's analytics-era popularity surge?
- Relationship between league-wide efficiency (ORtg) and media company valuations
- Impact of major NBA TV deal renewals on DIS stock price

#### 4. Volatility Modeling

**Financial Time-Series Methods:**
- ARIMA and SARIMA models for sports betting stock returns
- Weekly aggregation to capture seasonal patterns (52 weeks per year)
- Test whether sports disruptions (COVID, lockouts) created structural breaks

#### 5. Cross-Market Analysis

**Bidirectional Relationships:**
- Does NBA attendance correlate with sports betting stock returns?
- Do sports betting stock movements predict changes in NBA viewership?
- Comparative analysis across multiple betting operators (DKNG, PENN, MGM, CZR)

**Time Series Variables Extracted:**
- DKNG daily/weekly returns (2020-2025): ~1,180+ trading days
- PENN daily/weekly returns (2020-2025): ~1,180+ trading days
- MGM daily/weekly returns (2020-2025): ~1,180+ trading days
- CZR daily/weekly returns (2020-2025): ~1,180+ trading days
- DIS daily/weekly returns (1980-2025): ~11,000+ trading days

---

## Seasonality and Financial Time Series Coverage

### Seasonality Requirements

The NBA provides **natural seasonality** across multiple timescales:

1. **Annual Seasonality** (82-game regular season + playoffs):
   - Regular season: October - April
   - Playoffs: April - June
   - Off-season: July - September

2. **Time Series Exhibiting Seasonality:**
   - **Attendance**: Peaks during playoffs (April-June), minimal in off-season
   - **Pace**: May vary by month as teams rest starters late-season
   - **3PT Attempt Rate**: Potential playoff vs regular season differences
   - **Sports Betting Stocks (DKNG, PENN, MGM, CZR)**:
     - Weekly aggregation (frequency = 52) shows seasonal patterns
     - Higher volatility during playoffs
     - Trading volume spikes around NBA Finals
     - Earnings tied to NBA season milestones

3. **Seasonal Decomposition Methods:**
   - **SARIMA models** for weekly sports betting stock returns (S=52)
   - **STL decomposition** of attendance data (annual seasonality)
   - **Seasonal dummy variables** for playoff periods vs regular season

### Financial Time Series Coverage

- **DKNG (DraftKings)**: Daily/Weekly returns, 2020-04-23 to present (~1,180+ days)
  - Exhibits volatility clustering
  - Natural seasonality tied to NBA/sports calendar
  - COVID-era natural experiment

- **PENN (Penn Entertainment)**: Daily/Weekly returns, 2020-01-01 to present (~1,250+ days)
  - Transition from Barstool to ESPN BET partnership
  - Seasonal patterns from sports betting activity

- **MGM (MGM Resorts)**: Daily/Weekly returns, 2020-01-01 to present (~1,250+ days)
  - Integrated casino/sportsbook operations
  - Sports season effects on revenue

- **CZR (Caesars)**: Daily/Weekly returns, 2020-01-01 to present (~1,250+ days)
  - Major sportsbook competitor
  - Seasonal betting patterns

- **DIS (Disney/ESPN)**: Daily/Weekly returns, 1980-01-01 to present (~11,000+ days)
  - Long-term trends correlate with NBA popularity growth
  - Seasonal patterns from NBA broadcasting schedule
  - Major TV deal announcements create structural breaks

---

## Data Quality and Limitations

### Strengths
âœ“ **Comprehensive temporal coverage**: 45 years of NBA team statistics (1980-2025)
âœ“ **Official sources**: Basketball Reference (trusted), Yahoo Finance (authoritative)
âœ“ **Multiple financial instruments**: 5 stocks provide robust sports betting/entertainment sector coverage
âœ“ **Fully documented**: All extraction methods and sources provided for replication

### Limitations
âš  **Manual data collection for NBA stats**: Basketball Reference lacks API, requires manual download
  - *Mitigation*: Documented step-by-step process ensures replicability

âš  **Team-level aggregation only**: No individual player tracking
  - *Mitigation*: Team-level appropriate for league-wide structural change study

âš  **Sports betting stocks limited to 2020+**: Market didn't exist before 2018
  - *Mitigation*: 2020-2025 captures COVID disruption and market maturation phases

âš  **Annual frequency for NBA data**: Limits some time series techniques
  - *Mitigation*: 45 observations sufficient for ARIMA; financial data provides high-frequency component

---

## File Structure

```
josh-portfolio/
â”‚
â”œâ”€â”€ data/
â”‚   â”œâ”€â”€ adv_stats/
â”‚   â”‚   â”œâ”€â”€ 1980-81_adv_stats.csv
â”‚   â”‚   â”œâ”€â”€ 1981-82_adv_stats.csv
â”‚   â”‚   â””â”€â”€ ... (45 CSV files through 2024-25)
â”‚   â”‚
â”‚   â””â”€â”€ financial/
â”‚       â”œâ”€â”€ DKNG_daily.csv
â”‚       â”œâ”€â”€ PENN_daily.csv
â”‚       â”œâ”€â”€ MGM_daily.csv
â”‚       â”œâ”€â”€ CZR_daily.csv
â”‚       â””â”€â”€ DIS_daily.csv
â”‚
â””â”€â”€ download_financial_data.py  # Script to download financial data
```

---

## Replication Instructions

To fully replicate this data collection:

### 1. Basketball Reference Data (Team Advanced Stats)

**Manual Download** (required due to lack of API):

```bash
# For each season from 1980-81 to 2024-25:
# 1. Navigate to: https://www.basketball-reference.com/leagues/NBA_[YEAR].html
# 2. Scroll to "Advanced Stats" table
# 3. Click "Share & Export" â†’ "Get table as CSV (for Excel)"
# 4. Save the file to data/adv_stats/[YEAR]_adv_stats.csv
# 5. Repeat for all 45 seasons
```

**Read CSV files in R:**
```r
library(tidyverse)

# Read all advanced stats files
all_adv_files <- list.files("data/adv_stats", pattern = "*.csv", full.names = TRUE)

# Combine all seasons
all_adv_data <- map_df(all_adv_files, function(file) {
    season_str <- str_extract(basename(file), "\\d{4}-\\d{2}")
    season_year <- as.numeric(str_sub(season_str, 1, 4)) + 1

    df <- read_csv(file, show_col_types = FALSE)
    df$Season <- season_year
    return(df)
})

# Calculate league averages
league_avg <- all_adv_data %>%
    group_by(Season) %>%
    summarise(
        ORtg = mean(`Unnamed: 10_level_0_ORtg`, na.rm = TRUE),
        DRtg = mean(`Unnamed: 11_level_0_DRtg`, na.rm = TRUE),
        Pace = mean(`Unnamed: 13_level_0_Pace`, na.rm = TRUE),
        `3PAr` = mean(`Unnamed: 15_level_0_3PAr`, na.rm = TRUE),
        `TS%` = mean(`Unnamed: 16_level_0_TS%`, na.rm = TRUE),
        .groups = "drop"
    )
```

### 2. Financial Data (Yahoo Finance)

**Step 1: Install yfinance**
```bash
pip install yfinance pandas numpy
```

**Step 2: Run the download script**
```bash
python download_financial_data.py
```

This script (`download_financial_data.py`) automatically:
- Downloads all 5 stocks (DKNG, PENN, MGM, CZR, DIS)
- Calculates returns, log returns, and volatility metrics
- Saves CSV files to `data/financial/`
- Prints summary statistics

**Step 3: Read in R**
```r
library(tidyverse)
library(lubridate)

# Read DKNG data
dkng <- read_csv("data/financial/DKNG_daily.csv") %>%
    mutate(Date = ymd(Date))

# Convert to weekly for SARIMA (seasonality = 52)
dkng_weekly <- dkng %>%
    mutate(Week = floor_date(Date, "week")) %>%
    group_by(Week) %>%
    summarise(
        Adj_Close = last(`Adj Close`),
        Weekly_Return = (last(`Adj Close`) - first(Open)) / first(Open),
        .groups = "drop"
    )

# Create time series object
ts_dkng_weekly <- ts(dkng_weekly$Weekly_Return, frequency = 52)
```

---
